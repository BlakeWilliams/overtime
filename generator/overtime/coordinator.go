// Code generated by github.com/blakewilliams/overtime DO NOT EDIT

package overtime

import (
	"encoding/json"
	"net/http"
)

// Coordinator is the main entrypoint for the server and is responsible for
// routing requests to the correct endpoint and invoking the correct method
// on the controller. It also handles serializing the response and calling
// resolver methods to efficiently fetch related data.
type Coordinator struct {
	mux        http.ServeMux
	resolver   Resolver
	controller Controller
}

// NewCoordinator returns a new Coordinator that passes requests to the
// provided resolver and controller.
func NewCoordinator(resolver Resolver, controller Controller) *Coordinator {
	c := &Coordinator{
		mux:        http.ServeMux{},
		resolver:   resolver,
		controller: controller,
	}

	c.mux.HandleFunc("GET /api/v1/posts/{postID}", func(w http.ResponseWriter, r *http.Request) {
		result, err := c.controller.GetPostByID(w, r)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
		}

		ResolveForPost([]*Post{result}, c.resolver)

		w.WriteHeader(http.StatusOK)
		w.Header().Set("Content-Type", "application/json")
		err = json.NewEncoder(w).Encode(result)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
		}
	})

	c.mux.HandleFunc("GET /api/v1/comments/{commentID}", func(w http.ResponseWriter, r *http.Request) {
		result, err := c.controller.GetCommentByID(w, r)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
		}

		ResolveForComment([]*Comment{result}, c.resolver)

		w.WriteHeader(http.StatusOK)
		w.Header().Set("Content-Type", "application/json")
		err = json.NewEncoder(w).Encode(result)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
		}
	})

	return c
}

// ServeHTTP serves the provided request by routing it to the correct
// endpoint and invoking the correct method on the controller.
func (c *Coordinator) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	c.mux.ServeHTTP(w, r)
}
