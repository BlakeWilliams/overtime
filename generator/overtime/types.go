// Code generated by github.com/blakewilliams/overtime DO NOT EDIT

package overtime

type Comment struct {
	ID   int64  `json:"id"`
	Body string `json:"body"`
}

func ResolveForComment(records []*Comment, resolver Resolver) error {
	ids := make([]int64, len(records))
	recordsMap := make(map[int64]*Comment, len(records))
	for i, record := range records {
		ids[i] = record.ID
		recordsMap[record.ID] = record
	}
	return nil
}

type Post struct {
	ID       int64      `json:"id"`
	Body     string     `json:"body"`
	Comments []*Comment `json:"comments" resolver:"ResolvePostComments"`
}

func ResolveForPost(records []*Post, resolver Resolver) error {
	ids := make([]int64, len(records))
	recordsMap := make(map[int64]*Post, len(records))
	for i, record := range records {
		ids[i] = record.ID
		recordsMap[record.ID] = record
	}
	{
		res, err := resolver.ResolvePostComments(ids)
		if err != nil {
			return err
		}

		for id, record := range recordsMap {
			if val, ok := res[id]; ok {
				record.Comments = val
			}
		}
	}
	return nil
}
